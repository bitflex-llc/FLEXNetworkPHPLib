<?php
/**
 * TickerResponseModel
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TickerResponseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class TickerResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TickerResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_currency_id' => 'int',
        'quote_currency_id' => 'int',
        'last_price' => 'double',
        'quote_currency_volume' => 'double',
        'base_currency_volume' => 'double',
        'is_frozen' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_currency_id' => 'int32',
        'quote_currency_id' => 'int32',
        'last_price' => 'double',
        'quote_currency_volume' => 'double',
        'base_currency_volume' => 'double',
        'is_frozen' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_currency_id' => 'baseCurrencyId',
        'quote_currency_id' => 'quoteCurrencyId',
        'last_price' => 'lastPrice',
        'quote_currency_volume' => 'quoteCurrencyVolume',
        'base_currency_volume' => 'baseCurrencyVolume',
        'is_frozen' => 'isFrozen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_currency_id' => 'setBaseCurrencyId',
        'quote_currency_id' => 'setQuoteCurrencyId',
        'last_price' => 'setLastPrice',
        'quote_currency_volume' => 'setQuoteCurrencyVolume',
        'base_currency_volume' => 'setBaseCurrencyVolume',
        'is_frozen' => 'setIsFrozen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_currency_id' => 'getBaseCurrencyId',
        'quote_currency_id' => 'getQuoteCurrencyId',
        'last_price' => 'getLastPrice',
        'quote_currency_volume' => 'getQuoteCurrencyVolume',
        'base_currency_volume' => 'getBaseCurrencyVolume',
        'is_frozen' => 'getIsFrozen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_currency_id'] = $data['base_currency_id'] ?? null;
        $this->container['quote_currency_id'] = $data['quote_currency_id'] ?? null;
        $this->container['last_price'] = $data['last_price'] ?? null;
        $this->container['quote_currency_volume'] = $data['quote_currency_volume'] ?? null;
        $this->container['base_currency_volume'] = $data['base_currency_volume'] ?? null;
        $this->container['is_frozen'] = $data['is_frozen'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_currency_id
     *
     * @return int|null
     */
    public function getBaseCurrencyId()
    {
        return $this->container['base_currency_id'];
    }

    /**
     * Sets base_currency_id
     *
     * @param int|null $base_currency_id base_currency_id
     *
     * @return self
     */
    public function setBaseCurrencyId($base_currency_id)
    {
        $this->container['base_currency_id'] = $base_currency_id;

        return $this;
    }

    /**
     * Gets quote_currency_id
     *
     * @return int|null
     */
    public function getQuoteCurrencyId()
    {
        return $this->container['quote_currency_id'];
    }

    /**
     * Sets quote_currency_id
     *
     * @param int|null $quote_currency_id quote_currency_id
     *
     * @return self
     */
    public function setQuoteCurrencyId($quote_currency_id)
    {
        $this->container['quote_currency_id'] = $quote_currency_id;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return double|null
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param double|null $last_price last_price
     *
     * @return self
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets quote_currency_volume
     *
     * @return double|null
     */
    public function getQuoteCurrencyVolume()
    {
        return $this->container['quote_currency_volume'];
    }

    /**
     * Sets quote_currency_volume
     *
     * @param double|null $quote_currency_volume quote_currency_volume
     *
     * @return self
     */
    public function setQuoteCurrencyVolume($quote_currency_volume)
    {
        $this->container['quote_currency_volume'] = $quote_currency_volume;

        return $this;
    }

    /**
     * Gets base_currency_volume
     *
     * @return double|null
     */
    public function getBaseCurrencyVolume()
    {
        return $this->container['base_currency_volume'];
    }

    /**
     * Sets base_currency_volume
     *
     * @param double|null $base_currency_volume base_currency_volume
     *
     * @return self
     */
    public function setBaseCurrencyVolume($base_currency_volume)
    {
        $this->container['base_currency_volume'] = $base_currency_volume;

        return $this;
    }

    /**
     * Gets is_frozen
     *
     * @return int|null
     */
    public function getIsFrozen()
    {
        return $this->container['is_frozen'];
    }

    /**
     * Sets is_frozen
     *
     * @param int|null $is_frozen is_frozen
     *
     * @return self
     */
    public function setIsFrozen($is_frozen)
    {
        $this->container['is_frozen'] = $is_frozen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


