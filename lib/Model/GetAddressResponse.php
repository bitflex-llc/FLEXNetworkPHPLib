<?php
/**
 * GetAddressResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetAddressResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GetAddressResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAddressResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'address' => 'string',
        'is_address_generated' => 'bool',
        'currency' => 'string',
        'fullname' => 'string',
        'total_amount' => 'double',
        'available_amount' => 'double',
        'confirmation_count' => 'int',
        'destination_tag' => 'string',
        'currency_type' => '\OpenAPI\Client\Model\Type',
        'is_manual' => 'bool',
        'error_code' => '\OpenAPI\Client\Model\BalanceErrorCode',
        'minimum_deposit' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'address' => null,
        'is_address_generated' => null,
        'currency' => null,
        'fullname' => null,
        'total_amount' => 'double',
        'available_amount' => 'double',
        'confirmation_count' => 'int32',
        'destination_tag' => null,
        'currency_type' => null,
        'is_manual' => null,
        'error_code' => null,
        'minimum_deposit' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'address' => 'address',
        'is_address_generated' => 'isAddressGenerated',
        'currency' => 'currency',
        'fullname' => 'fullname',
        'total_amount' => 'totalAmount',
        'available_amount' => 'availableAmount',
        'confirmation_count' => 'confirmationCount',
        'destination_tag' => 'destinationTag',
        'currency_type' => 'currencyType',
        'is_manual' => 'isManual',
        'error_code' => 'errorCode',
        'minimum_deposit' => 'minimumDeposit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'address' => 'setAddress',
        'is_address_generated' => 'setIsAddressGenerated',
        'currency' => 'setCurrency',
        'fullname' => 'setFullname',
        'total_amount' => 'setTotalAmount',
        'available_amount' => 'setAvailableAmount',
        'confirmation_count' => 'setConfirmationCount',
        'destination_tag' => 'setDestinationTag',
        'currency_type' => 'setCurrencyType',
        'is_manual' => 'setIsManual',
        'error_code' => 'setErrorCode',
        'minimum_deposit' => 'setMinimumDeposit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'address' => 'getAddress',
        'is_address_generated' => 'getIsAddressGenerated',
        'currency' => 'getCurrency',
        'fullname' => 'getFullname',
        'total_amount' => 'getTotalAmount',
        'available_amount' => 'getAvailableAmount',
        'confirmation_count' => 'getConfirmationCount',
        'destination_tag' => 'getDestinationTag',
        'currency_type' => 'getCurrencyType',
        'is_manual' => 'getIsManual',
        'error_code' => 'getErrorCode',
        'minimum_deposit' => 'getMinimumDeposit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = $data['success'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['is_address_generated'] = $data['is_address_generated'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['fullname'] = $data['fullname'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['available_amount'] = $data['available_amount'] ?? null;
        $this->container['confirmation_count'] = $data['confirmation_count'] ?? null;
        $this->container['destination_tag'] = $data['destination_tag'] ?? null;
        $this->container['currency_type'] = $data['currency_type'] ?? null;
        $this->container['is_manual'] = $data['is_manual'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
        $this->container['minimum_deposit'] = $data['minimum_deposit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool|null $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets is_address_generated
     *
     * @return bool|null
     */
    public function getIsAddressGenerated()
    {
        return $this->container['is_address_generated'];
    }

    /**
     * Sets is_address_generated
     *
     * @param bool|null $is_address_generated is_address_generated
     *
     * @return self
     */
    public function setIsAddressGenerated($is_address_generated)
    {
        $this->container['is_address_generated'] = $is_address_generated;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return string|null
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param string|null $fullname fullname
     *
     * @return self
     */
    public function setFullname($fullname)
    {
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets available_amount
     *
     * @return double|null
     */
    public function getAvailableAmount()
    {
        return $this->container['available_amount'];
    }

    /**
     * Sets available_amount
     *
     * @param double|null $available_amount available_amount
     *
     * @return self
     */
    public function setAvailableAmount($available_amount)
    {
        $this->container['available_amount'] = $available_amount;

        return $this;
    }

    /**
     * Gets confirmation_count
     *
     * @return int|null
     */
    public function getConfirmationCount()
    {
        return $this->container['confirmation_count'];
    }

    /**
     * Sets confirmation_count
     *
     * @param int|null $confirmation_count confirmation_count
     *
     * @return self
     */
    public function setConfirmationCount($confirmation_count)
    {
        $this->container['confirmation_count'] = $confirmation_count;

        return $this;
    }

    /**
     * Gets destination_tag
     *
     * @return string|null
     */
    public function getDestinationTag()
    {
        return $this->container['destination_tag'];
    }

    /**
     * Sets destination_tag
     *
     * @param string|null $destination_tag destination_tag
     *
     * @return self
     */
    public function setDestinationTag($destination_tag)
    {
        $this->container['destination_tag'] = $destination_tag;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return \OpenAPI\Client\Model\Type|null
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param \OpenAPI\Client\Model\Type|null $currency_type currency_type
     *
     * @return self
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool|null $is_manual is_manual
     *
     * @return self
     */
    public function setIsManual($is_manual)
    {
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return \OpenAPI\Client\Model\BalanceErrorCode|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \OpenAPI\Client\Model\BalanceErrorCode|null $error_code error_code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets minimum_deposit
     *
     * @return double|null
     */
    public function getMinimumDeposit()
    {
        return $this->container['minimum_deposit'];
    }

    /**
     * Sets minimum_deposit
     *
     * @param double|null $minimum_deposit minimum_deposit
     *
     * @return self
     */
    public function setMinimumDeposit($minimum_deposit)
    {
        $this->container['minimum_deposit'] = $minimum_deposit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


