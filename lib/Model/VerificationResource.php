<?php
/**
 * VerificationResource
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VerificationResource Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class VerificationResource implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VerificationResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sid' => 'string',
        'service_sid' => 'string',
        'account_sid' => 'string',
        'to' => 'string',
        'channel' => 'object',
        'status' => 'string',
        'valid' => 'bool',
        'lookup' => 'mixed',
        'amount' => 'string',
        'payee' => 'string',
        'send_code_attempts' => 'mixed[]',
        'date_created' => '\DateTime',
        'date_updated' => '\DateTime',
        'sna' => 'mixed',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sid' => null,
        'service_sid' => null,
        'account_sid' => null,
        'to' => null,
        'channel' => null,
        'status' => null,
        'valid' => null,
        'lookup' => null,
        'amount' => null,
        'payee' => null,
        'send_code_attempts' => null,
        'date_created' => 'date-time',
        'date_updated' => 'date-time',
        'sna' => null,
        'url' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sid' => 'sid',
        'service_sid' => 'serviceSid',
        'account_sid' => 'accountSid',
        'to' => 'to',
        'channel' => 'channel',
        'status' => 'status',
        'valid' => 'valid',
        'lookup' => 'lookup',
        'amount' => 'amount',
        'payee' => 'payee',
        'send_code_attempts' => 'sendCodeAttempts',
        'date_created' => 'dateCreated',
        'date_updated' => 'dateUpdated',
        'sna' => 'sna',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sid' => 'setSid',
        'service_sid' => 'setServiceSid',
        'account_sid' => 'setAccountSid',
        'to' => 'setTo',
        'channel' => 'setChannel',
        'status' => 'setStatus',
        'valid' => 'setValid',
        'lookup' => 'setLookup',
        'amount' => 'setAmount',
        'payee' => 'setPayee',
        'send_code_attempts' => 'setSendCodeAttempts',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated',
        'sna' => 'setSna',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sid' => 'getSid',
        'service_sid' => 'getServiceSid',
        'account_sid' => 'getAccountSid',
        'to' => 'getTo',
        'channel' => 'getChannel',
        'status' => 'getStatus',
        'valid' => 'getValid',
        'lookup' => 'getLookup',
        'amount' => 'getAmount',
        'payee' => 'getPayee',
        'send_code_attempts' => 'getSendCodeAttempts',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated',
        'sna' => 'getSna',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sid'] = $data['sid'] ?? null;
        $this->container['service_sid'] = $data['service_sid'] ?? null;
        $this->container['account_sid'] = $data['account_sid'] ?? null;
        $this->container['to'] = $data['to'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['valid'] = $data['valid'] ?? null;
        $this->container['lookup'] = $data['lookup'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['payee'] = $data['payee'] ?? null;
        $this->container['send_code_attempts'] = $data['send_code_attempts'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['date_updated'] = $data['date_updated'] ?? null;
        $this->container['sna'] = $data['sna'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sid
     *
     * @return string|null
     */
    public function getSid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param string|null $sid sid
     *
     * @return self
     */
    public function setSid($sid)
    {
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets service_sid
     *
     * @return string|null
     */
    public function getServiceSid()
    {
        return $this->container['service_sid'];
    }

    /**
     * Sets service_sid
     *
     * @param string|null $service_sid service_sid
     *
     * @return self
     */
    public function setServiceSid($service_sid)
    {
        $this->container['service_sid'] = $service_sid;

        return $this;
    }

    /**
     * Gets account_sid
     *
     * @return string|null
     */
    public function getAccountSid()
    {
        return $this->container['account_sid'];
    }

    /**
     * Sets account_sid
     *
     * @param string|null $account_sid account_sid
     *
     * @return self
     */
    public function setAccountSid($account_sid)
    {
        $this->container['account_sid'] = $account_sid;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return object|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param object|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool|null
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool|null $valid valid
     *
     * @return self
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets lookup
     *
     * @return mixed|null
     */
    public function getLookup()
    {
        return $this->container['lookup'];
    }

    /**
     * Sets lookup
     *
     * @param mixed|null $lookup lookup
     *
     * @return self
     */
    public function setLookup($lookup)
    {
        $this->container['lookup'] = $lookup;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return string|null
     */
    public function getPayee()
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param string|null $payee payee
     *
     * @return self
     */
    public function setPayee($payee)
    {
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets send_code_attempts
     *
     * @return mixed[]|null
     */
    public function getSendCodeAttempts()
    {
        return $this->container['send_code_attempts'];
    }

    /**
     * Sets send_code_attempts
     *
     * @param mixed[]|null $send_code_attempts send_code_attempts
     *
     * @return self
     */
    public function setSendCodeAttempts($send_code_attempts)
    {
        $this->container['send_code_attempts'] = $send_code_attempts;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime|null
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime|null $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets sna
     *
     * @return mixed|null
     */
    public function getSna()
    {
        return $this->container['sna'];
    }

    /**
     * Sets sna
     *
     * @param mixed|null $sna sna
     *
     * @return self
     */
    public function setSna($sna)
    {
        $this->container['sna'] = $sna;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


