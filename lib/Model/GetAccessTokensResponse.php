<?php
/**
 * GetAccessTokensResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetAccessTokensResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GetAccessTokensResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetAccessTokensResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'expiration' => 'int',
        'description' => 'string',
        'is_this_device' => 'bool',
        'terminate_reason' => 'string',
        'is_online' => 'bool',
        'last_ip' => 'string',
        'last_active' => '\DateTime',
        'is_guard_device' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'expiration' => 'int64',
        'description' => null,
        'is_this_device' => null,
        'terminate_reason' => null,
        'is_online' => null,
        'last_ip' => null,
        'last_active' => 'date-time',
        'is_guard_device' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'expiration' => 'expiration',
        'description' => 'description',
        'is_this_device' => 'isThisDevice',
        'terminate_reason' => 'terminateReason',
        'is_online' => 'isOnline',
        'last_ip' => 'lastIP',
        'last_active' => 'lastActive',
        'is_guard_device' => 'isGuardDevice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'expiration' => 'setExpiration',
        'description' => 'setDescription',
        'is_this_device' => 'setIsThisDevice',
        'terminate_reason' => 'setTerminateReason',
        'is_online' => 'setIsOnline',
        'last_ip' => 'setLastIp',
        'last_active' => 'setLastActive',
        'is_guard_device' => 'setIsGuardDevice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'expiration' => 'getExpiration',
        'description' => 'getDescription',
        'is_this_device' => 'getIsThisDevice',
        'terminate_reason' => 'getTerminateReason',
        'is_online' => 'getIsOnline',
        'last_ip' => 'getLastIp',
        'last_active' => 'getLastActive',
        'is_guard_device' => 'getIsGuardDevice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['expiration'] = $data['expiration'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['is_this_device'] = $data['is_this_device'] ?? null;
        $this->container['terminate_reason'] = $data['terminate_reason'] ?? null;
        $this->container['is_online'] = $data['is_online'] ?? null;
        $this->container['last_ip'] = $data['last_ip'] ?? null;
        $this->container['last_active'] = $data['last_active'] ?? null;
        $this->container['is_guard_device'] = $data['is_guard_device'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return int|null
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param int|null $expiration expiration
     *
     * @return self
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_this_device
     *
     * @return bool|null
     */
    public function getIsThisDevice()
    {
        return $this->container['is_this_device'];
    }

    /**
     * Sets is_this_device
     *
     * @param bool|null $is_this_device is_this_device
     *
     * @return self
     */
    public function setIsThisDevice($is_this_device)
    {
        $this->container['is_this_device'] = $is_this_device;

        return $this;
    }

    /**
     * Gets terminate_reason
     *
     * @return string|null
     */
    public function getTerminateReason()
    {
        return $this->container['terminate_reason'];
    }

    /**
     * Sets terminate_reason
     *
     * @param string|null $terminate_reason terminate_reason
     *
     * @return self
     */
    public function setTerminateReason($terminate_reason)
    {
        $this->container['terminate_reason'] = $terminate_reason;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool|null
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool|null $is_online is_online
     *
     * @return self
     */
    public function setIsOnline($is_online)
    {
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets last_ip
     *
     * @return string|null
     */
    public function getLastIp()
    {
        return $this->container['last_ip'];
    }

    /**
     * Sets last_ip
     *
     * @param string|null $last_ip last_ip
     *
     * @return self
     */
    public function setLastIp($last_ip)
    {
        $this->container['last_ip'] = $last_ip;

        return $this;
    }

    /**
     * Gets last_active
     *
     * @return \DateTime|null
     */
    public function getLastActive()
    {
        return $this->container['last_active'];
    }

    /**
     * Sets last_active
     *
     * @param \DateTime|null $last_active last_active
     *
     * @return self
     */
    public function setLastActive($last_active)
    {
        $this->container['last_active'] = $last_active;

        return $this;
    }

    /**
     * Gets is_guard_device
     *
     * @return bool|null
     */
    public function getIsGuardDevice()
    {
        return $this->container['is_guard_device'];
    }

    /**
     * Sets is_guard_device
     *
     * @param bool|null $is_guard_device is_guard_device
     *
     * @return self
     */
    public function setIsGuardDevice($is_guard_device)
    {
        $this->container['is_guard_device'] = $is_guard_device;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


