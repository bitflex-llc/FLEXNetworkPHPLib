<?php
/**
 * ApiOpenOffer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApiOpenOffer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ApiOpenOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiOpenOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'direction' => '\OpenAPI\Client\Model\TradeDirection',
        'status' => '\OpenAPI\Client\Model\OfferStatus',
        'user_id' => 'string',
        'text' => 'string',
        'price' => 'double',
        'min' => 'double',
        'max' => 'double',
        'currency' => '\OpenAPI\Client\Model\Currencies',
        'username' => 'string',
        'is_trust' => 'bool',
        'trade_count' => 'int',
        'trust_message' => 'string',
        'median_reply_time_minutes' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'direction' => null,
        'status' => null,
        'user_id' => null,
        'text' => null,
        'price' => 'double',
        'min' => 'double',
        'max' => 'double',
        'currency' => null,
        'username' => null,
        'is_trust' => null,
        'trade_count' => 'int32',
        'trust_message' => null,
        'median_reply_time_minutes' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'direction' => 'direction',
        'status' => 'status',
        'user_id' => 'userId',
        'text' => 'text',
        'price' => 'price',
        'min' => 'min',
        'max' => 'max',
        'currency' => 'currency',
        'username' => 'username',
        'is_trust' => 'isTrust',
        'trade_count' => 'tradeCount',
        'trust_message' => 'trustMessage',
        'median_reply_time_minutes' => 'medianReplyTimeMinutes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'direction' => 'setDirection',
        'status' => 'setStatus',
        'user_id' => 'setUserId',
        'text' => 'setText',
        'price' => 'setPrice',
        'min' => 'setMin',
        'max' => 'setMax',
        'currency' => 'setCurrency',
        'username' => 'setUsername',
        'is_trust' => 'setIsTrust',
        'trade_count' => 'setTradeCount',
        'trust_message' => 'setTrustMessage',
        'median_reply_time_minutes' => 'setMedianReplyTimeMinutes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'direction' => 'getDirection',
        'status' => 'getStatus',
        'user_id' => 'getUserId',
        'text' => 'getText',
        'price' => 'getPrice',
        'min' => 'getMin',
        'max' => 'getMax',
        'currency' => 'getCurrency',
        'username' => 'getUsername',
        'is_trust' => 'getIsTrust',
        'trade_count' => 'getTradeCount',
        'trust_message' => 'getTrustMessage',
        'median_reply_time_minutes' => 'getMedianReplyTimeMinutes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['direction'] = $data['direction'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['text'] = $data['text'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['min'] = $data['min'] ?? null;
        $this->container['max'] = $data['max'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['is_trust'] = $data['is_trust'] ?? null;
        $this->container['trade_count'] = $data['trade_count'] ?? null;
        $this->container['trust_message'] = $data['trust_message'] ?? null;
        $this->container['median_reply_time_minutes'] = $data['median_reply_time_minutes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return \OpenAPI\Client\Model\TradeDirection|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param \OpenAPI\Client\Model\TradeDirection|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OfferStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OfferStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets min
     *
     * @return double|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param double|null $min min
     *
     * @return self
     */
    public function setMin($min)
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     *
     * @return double|null
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param double|null $max max
     *
     * @return self
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currencies|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currencies|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets is_trust
     *
     * @return bool|null
     */
    public function getIsTrust()
    {
        return $this->container['is_trust'];
    }

    /**
     * Sets is_trust
     *
     * @param bool|null $is_trust is_trust
     *
     * @return self
     */
    public function setIsTrust($is_trust)
    {
        $this->container['is_trust'] = $is_trust;

        return $this;
    }

    /**
     * Gets trade_count
     *
     * @return int|null
     */
    public function getTradeCount()
    {
        return $this->container['trade_count'];
    }

    /**
     * Sets trade_count
     *
     * @param int|null $trade_count trade_count
     *
     * @return self
     */
    public function setTradeCount($trade_count)
    {
        $this->container['trade_count'] = $trade_count;

        return $this;
    }

    /**
     * Gets trust_message
     *
     * @return string|null
     */
    public function getTrustMessage()
    {
        return $this->container['trust_message'];
    }

    /**
     * Sets trust_message
     *
     * @param string|null $trust_message trust_message
     *
     * @return self
     */
    public function setTrustMessage($trust_message)
    {
        $this->container['trust_message'] = $trust_message;

        return $this;
    }

    /**
     * Gets median_reply_time_minutes
     *
     * @return int|null
     */
    public function getMedianReplyTimeMinutes()
    {
        return $this->container['median_reply_time_minutes'];
    }

    /**
     * Sets median_reply_time_minutes
     *
     * @param int|null $median_reply_time_minutes median_reply_time_minutes
     *
     * @return self
     */
    public function setMedianReplyTimeMinutes($median_reply_time_minutes)
    {
        $this->container['median_reply_time_minutes'] = $median_reply_time_minutes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


