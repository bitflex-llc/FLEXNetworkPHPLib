<?php
/**
 * CoinTokenAddRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoinTokenAddRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CoinTokenAddRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CoinTokenAddRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cmc_url' => 'string',
        'contract_address' => 'string',
        'currency_type' => '\OpenAPI\Client\Model\Type',
        'exploler_url' => 'string',
        'withdraw_fee' => 'double',
        'withdraw_fee_percent' => 'double',
        'confirmation_count' => 'int',
        'decimals' => 'int',
        'rpc_ip' => 'string',
        'rpc_port' => 'string',
        'rpc_username' => 'string',
        'rpc_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cmc_url' => null,
        'contract_address' => null,
        'currency_type' => null,
        'exploler_url' => null,
        'withdraw_fee' => 'double',
        'withdraw_fee_percent' => 'double',
        'confirmation_count' => 'int32',
        'decimals' => 'int32',
        'rpc_ip' => null,
        'rpc_port' => null,
        'rpc_username' => null,
        'rpc_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cmc_url' => 'cmcUrl',
        'contract_address' => 'contractAddress',
        'currency_type' => 'currencyType',
        'exploler_url' => 'explolerUrl',
        'withdraw_fee' => 'withdrawFee',
        'withdraw_fee_percent' => 'withdrawFeePercent',
        'confirmation_count' => 'confirmationCount',
        'decimals' => 'decimals',
        'rpc_ip' => 'rpcIP',
        'rpc_port' => 'rpcPort',
        'rpc_username' => 'rpcUsername',
        'rpc_password' => 'rpcPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cmc_url' => 'setCmcUrl',
        'contract_address' => 'setContractAddress',
        'currency_type' => 'setCurrencyType',
        'exploler_url' => 'setExplolerUrl',
        'withdraw_fee' => 'setWithdrawFee',
        'withdraw_fee_percent' => 'setWithdrawFeePercent',
        'confirmation_count' => 'setConfirmationCount',
        'decimals' => 'setDecimals',
        'rpc_ip' => 'setRpcIp',
        'rpc_port' => 'setRpcPort',
        'rpc_username' => 'setRpcUsername',
        'rpc_password' => 'setRpcPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cmc_url' => 'getCmcUrl',
        'contract_address' => 'getContractAddress',
        'currency_type' => 'getCurrencyType',
        'exploler_url' => 'getExplolerUrl',
        'withdraw_fee' => 'getWithdrawFee',
        'withdraw_fee_percent' => 'getWithdrawFeePercent',
        'confirmation_count' => 'getConfirmationCount',
        'decimals' => 'getDecimals',
        'rpc_ip' => 'getRpcIp',
        'rpc_port' => 'getRpcPort',
        'rpc_username' => 'getRpcUsername',
        'rpc_password' => 'getRpcPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cmc_url'] = $data['cmc_url'] ?? null;
        $this->container['contract_address'] = $data['contract_address'] ?? null;
        $this->container['currency_type'] = $data['currency_type'] ?? null;
        $this->container['exploler_url'] = $data['exploler_url'] ?? null;
        $this->container['withdraw_fee'] = $data['withdraw_fee'] ?? null;
        $this->container['withdraw_fee_percent'] = $data['withdraw_fee_percent'] ?? null;
        $this->container['confirmation_count'] = $data['confirmation_count'] ?? null;
        $this->container['decimals'] = $data['decimals'] ?? null;
        $this->container['rpc_ip'] = $data['rpc_ip'] ?? null;
        $this->container['rpc_port'] = $data['rpc_port'] ?? null;
        $this->container['rpc_username'] = $data['rpc_username'] ?? null;
        $this->container['rpc_password'] = $data['rpc_password'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cmc_url
     *
     * @return string|null
     */
    public function getCmcUrl()
    {
        return $this->container['cmc_url'];
    }

    /**
     * Sets cmc_url
     *
     * @param string|null $cmc_url cmc_url
     *
     * @return self
     */
    public function setCmcUrl($cmc_url)
    {
        $this->container['cmc_url'] = $cmc_url;

        return $this;
    }

    /**
     * Gets contract_address
     *
     * @return string|null
     */
    public function getContractAddress()
    {
        return $this->container['contract_address'];
    }

    /**
     * Sets contract_address
     *
     * @param string|null $contract_address contract_address
     *
     * @return self
     */
    public function setContractAddress($contract_address)
    {
        $this->container['contract_address'] = $contract_address;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return \OpenAPI\Client\Model\Type|null
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param \OpenAPI\Client\Model\Type|null $currency_type currency_type
     *
     * @return self
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets exploler_url
     *
     * @return string|null
     */
    public function getExplolerUrl()
    {
        return $this->container['exploler_url'];
    }

    /**
     * Sets exploler_url
     *
     * @param string|null $exploler_url exploler_url
     *
     * @return self
     */
    public function setExplolerUrl($exploler_url)
    {
        $this->container['exploler_url'] = $exploler_url;

        return $this;
    }

    /**
     * Gets withdraw_fee
     *
     * @return double|null
     */
    public function getWithdrawFee()
    {
        return $this->container['withdraw_fee'];
    }

    /**
     * Sets withdraw_fee
     *
     * @param double|null $withdraw_fee withdraw_fee
     *
     * @return self
     */
    public function setWithdrawFee($withdraw_fee)
    {
        $this->container['withdraw_fee'] = $withdraw_fee;

        return $this;
    }

    /**
     * Gets withdraw_fee_percent
     *
     * @return double|null
     */
    public function getWithdrawFeePercent()
    {
        return $this->container['withdraw_fee_percent'];
    }

    /**
     * Sets withdraw_fee_percent
     *
     * @param double|null $withdraw_fee_percent withdraw_fee_percent
     *
     * @return self
     */
    public function setWithdrawFeePercent($withdraw_fee_percent)
    {
        $this->container['withdraw_fee_percent'] = $withdraw_fee_percent;

        return $this;
    }

    /**
     * Gets confirmation_count
     *
     * @return int|null
     */
    public function getConfirmationCount()
    {
        return $this->container['confirmation_count'];
    }

    /**
     * Sets confirmation_count
     *
     * @param int|null $confirmation_count confirmation_count
     *
     * @return self
     */
    public function setConfirmationCount($confirmation_count)
    {
        $this->container['confirmation_count'] = $confirmation_count;

        return $this;
    }

    /**
     * Gets decimals
     *
     * @return int|null
     */
    public function getDecimals()
    {
        return $this->container['decimals'];
    }

    /**
     * Sets decimals
     *
     * @param int|null $decimals decimals
     *
     * @return self
     */
    public function setDecimals($decimals)
    {
        $this->container['decimals'] = $decimals;

        return $this;
    }

    /**
     * Gets rpc_ip
     *
     * @return string|null
     */
    public function getRpcIp()
    {
        return $this->container['rpc_ip'];
    }

    /**
     * Sets rpc_ip
     *
     * @param string|null $rpc_ip rpc_ip
     *
     * @return self
     */
    public function setRpcIp($rpc_ip)
    {
        $this->container['rpc_ip'] = $rpc_ip;

        return $this;
    }

    /**
     * Gets rpc_port
     *
     * @return string|null
     */
    public function getRpcPort()
    {
        return $this->container['rpc_port'];
    }

    /**
     * Sets rpc_port
     *
     * @param string|null $rpc_port rpc_port
     *
     * @return self
     */
    public function setRpcPort($rpc_port)
    {
        $this->container['rpc_port'] = $rpc_port;

        return $this;
    }

    /**
     * Gets rpc_username
     *
     * @return string|null
     */
    public function getRpcUsername()
    {
        return $this->container['rpc_username'];
    }

    /**
     * Sets rpc_username
     *
     * @param string|null $rpc_username rpc_username
     *
     * @return self
     */
    public function setRpcUsername($rpc_username)
    {
        $this->container['rpc_username'] = $rpc_username;

        return $this;
    }

    /**
     * Gets rpc_password
     *
     * @return string|null
     */
    public function getRpcPassword()
    {
        return $this->container['rpc_password'];
    }

    /**
     * Sets rpc_password
     *
     * @param string|null $rpc_password rpc_password
     *
     * @return self
     */
    public function setRpcPassword($rpc_password)
    {
        $this->container['rpc_password'] = $rpc_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


