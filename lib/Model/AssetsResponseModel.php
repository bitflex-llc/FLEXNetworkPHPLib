<?php
/**
 * AssetsResponseModel
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AssetsResponseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AssetsResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AssetsResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'symbol' => 'string',
        'cmcid' => 'int',
        'can_withdraw' => 'bool',
        'can_deposit' => 'bool',
        'min_withdraw' => 'double',
        'max_withdraw' => 'double',
        'withdraw_fee' => 'double',
        'taker_fee' => 'double',
        'maker_fee' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'symbol' => null,
        'cmcid' => 'int32',
        'can_withdraw' => null,
        'can_deposit' => null,
        'min_withdraw' => 'double',
        'max_withdraw' => 'double',
        'withdraw_fee' => 'double',
        'taker_fee' => 'double',
        'maker_fee' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'symbol' => 'symbol',
        'cmcid' => 'cmcid',
        'can_withdraw' => 'canWithdraw',
        'can_deposit' => 'canDeposit',
        'min_withdraw' => 'minWithdraw',
        'max_withdraw' => 'maxWithdraw',
        'withdraw_fee' => 'withdrawFee',
        'taker_fee' => 'takerFee',
        'maker_fee' => 'makerFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'symbol' => 'setSymbol',
        'cmcid' => 'setCmcid',
        'can_withdraw' => 'setCanWithdraw',
        'can_deposit' => 'setCanDeposit',
        'min_withdraw' => 'setMinWithdraw',
        'max_withdraw' => 'setMaxWithdraw',
        'withdraw_fee' => 'setWithdrawFee',
        'taker_fee' => 'setTakerFee',
        'maker_fee' => 'setMakerFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'symbol' => 'getSymbol',
        'cmcid' => 'getCmcid',
        'can_withdraw' => 'getCanWithdraw',
        'can_deposit' => 'getCanDeposit',
        'min_withdraw' => 'getMinWithdraw',
        'max_withdraw' => 'getMaxWithdraw',
        'withdraw_fee' => 'getWithdrawFee',
        'taker_fee' => 'getTakerFee',
        'maker_fee' => 'getMakerFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['cmcid'] = $data['cmcid'] ?? null;
        $this->container['can_withdraw'] = $data['can_withdraw'] ?? null;
        $this->container['can_deposit'] = $data['can_deposit'] ?? null;
        $this->container['min_withdraw'] = $data['min_withdraw'] ?? null;
        $this->container['max_withdraw'] = $data['max_withdraw'] ?? null;
        $this->container['withdraw_fee'] = $data['withdraw_fee'] ?? null;
        $this->container['taker_fee'] = $data['taker_fee'] ?? null;
        $this->container['maker_fee'] = $data['maker_fee'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets cmcid
     *
     * @return int|null
     */
    public function getCmcid()
    {
        return $this->container['cmcid'];
    }

    /**
     * Sets cmcid
     *
     * @param int|null $cmcid cmcid
     *
     * @return self
     */
    public function setCmcid($cmcid)
    {
        $this->container['cmcid'] = $cmcid;

        return $this;
    }

    /**
     * Gets can_withdraw
     *
     * @return bool|null
     */
    public function getCanWithdraw()
    {
        return $this->container['can_withdraw'];
    }

    /**
     * Sets can_withdraw
     *
     * @param bool|null $can_withdraw can_withdraw
     *
     * @return self
     */
    public function setCanWithdraw($can_withdraw)
    {
        $this->container['can_withdraw'] = $can_withdraw;

        return $this;
    }

    /**
     * Gets can_deposit
     *
     * @return bool|null
     */
    public function getCanDeposit()
    {
        return $this->container['can_deposit'];
    }

    /**
     * Sets can_deposit
     *
     * @param bool|null $can_deposit can_deposit
     *
     * @return self
     */
    public function setCanDeposit($can_deposit)
    {
        $this->container['can_deposit'] = $can_deposit;

        return $this;
    }

    /**
     * Gets min_withdraw
     *
     * @return double|null
     */
    public function getMinWithdraw()
    {
        return $this->container['min_withdraw'];
    }

    /**
     * Sets min_withdraw
     *
     * @param double|null $min_withdraw min_withdraw
     *
     * @return self
     */
    public function setMinWithdraw($min_withdraw)
    {
        $this->container['min_withdraw'] = $min_withdraw;

        return $this;
    }

    /**
     * Gets max_withdraw
     *
     * @return double|null
     */
    public function getMaxWithdraw()
    {
        return $this->container['max_withdraw'];
    }

    /**
     * Sets max_withdraw
     *
     * @param double|null $max_withdraw max_withdraw
     *
     * @return self
     */
    public function setMaxWithdraw($max_withdraw)
    {
        $this->container['max_withdraw'] = $max_withdraw;

        return $this;
    }

    /**
     * Gets withdraw_fee
     *
     * @return double|null
     */
    public function getWithdrawFee()
    {
        return $this->container['withdraw_fee'];
    }

    /**
     * Sets withdraw_fee
     *
     * @param double|null $withdraw_fee withdraw_fee
     *
     * @return self
     */
    public function setWithdrawFee($withdraw_fee)
    {
        $this->container['withdraw_fee'] = $withdraw_fee;

        return $this;
    }

    /**
     * Gets taker_fee
     *
     * @return double|null
     */
    public function getTakerFee()
    {
        return $this->container['taker_fee'];
    }

    /**
     * Sets taker_fee
     *
     * @param double|null $taker_fee taker_fee
     *
     * @return self
     */
    public function setTakerFee($taker_fee)
    {
        $this->container['taker_fee'] = $taker_fee;

        return $this;
    }

    /**
     * Gets maker_fee
     *
     * @return double|null
     */
    public function getMakerFee()
    {
        return $this->container['maker_fee'];
    }

    /**
     * Sets maker_fee
     *
     * @param double|null $maker_fee maker_fee
     *
     * @return self
     */
    public function setMakerFee($maker_fee)
    {
        $this->container['maker_fee'] = $maker_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


