<?php
/**
 * MerchantTransaction
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MerchantTransaction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class MerchantTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'currency_id' => 'int',
        'order_id' => 'string',
        'amount' => 'double',
        'state' => '\OpenAPI\Client\Model\TransactionState',
        'created_at' => '\DateTime',
        'timeout_at' => '\DateTime',
        'address_to' => 'string',
        'address_from' => 'string',
        'hash_or_tx_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'currency_id' => 'int64',
        'order_id' => null,
        'amount' => 'double',
        'state' => null,
        'created_at' => 'date-time',
        'timeout_at' => 'date-time',
        'address_to' => null,
        'address_from' => null,
        'hash_or_tx_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'currency_id' => 'currencyId',
        'order_id' => 'orderId',
        'amount' => 'amount',
        'state' => 'state',
        'created_at' => 'createdAt',
        'timeout_at' => 'timeoutAt',
        'address_to' => 'addressTo',
        'address_from' => 'addressFrom',
        'hash_or_tx_id' => 'hashOrTxId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'currency_id' => 'setCurrencyId',
        'order_id' => 'setOrderId',
        'amount' => 'setAmount',
        'state' => 'setState',
        'created_at' => 'setCreatedAt',
        'timeout_at' => 'setTimeoutAt',
        'address_to' => 'setAddressTo',
        'address_from' => 'setAddressFrom',
        'hash_or_tx_id' => 'setHashOrTxId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'currency_id' => 'getCurrencyId',
        'order_id' => 'getOrderId',
        'amount' => 'getAmount',
        'state' => 'getState',
        'created_at' => 'getCreatedAt',
        'timeout_at' => 'getTimeoutAt',
        'address_to' => 'getAddressTo',
        'address_from' => 'getAddressFrom',
        'hash_or_tx_id' => 'getHashOrTxId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['currency_id'] = $data['currency_id'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['timeout_at'] = $data['timeout_at'] ?? null;
        $this->container['address_to'] = $data['address_to'] ?? null;
        $this->container['address_from'] = $data['address_from'] ?? null;
        $this->container['hash_or_tx_id'] = $data['hash_or_tx_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int|null
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int|null $currency_id currency_id
     *
     * @return self
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\TransactionState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\TransactionState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets timeout_at
     *
     * @return \DateTime|null
     */
    public function getTimeoutAt()
    {
        return $this->container['timeout_at'];
    }

    /**
     * Sets timeout_at
     *
     * @param \DateTime|null $timeout_at timeout_at
     *
     * @return self
     */
    public function setTimeoutAt($timeout_at)
    {
        $this->container['timeout_at'] = $timeout_at;

        return $this;
    }

    /**
     * Gets address_to
     *
     * @return string|null
     */
    public function getAddressTo()
    {
        return $this->container['address_to'];
    }

    /**
     * Sets address_to
     *
     * @param string|null $address_to address_to
     *
     * @return self
     */
    public function setAddressTo($address_to)
    {
        $this->container['address_to'] = $address_to;

        return $this;
    }

    /**
     * Gets address_from
     *
     * @return string|null
     */
    public function getAddressFrom()
    {
        return $this->container['address_from'];
    }

    /**
     * Sets address_from
     *
     * @param string|null $address_from address_from
     *
     * @return self
     */
    public function setAddressFrom($address_from)
    {
        $this->container['address_from'] = $address_from;

        return $this;
    }

    /**
     * Gets hash_or_tx_id
     *
     * @return string|null
     */
    public function getHashOrTxId()
    {
        return $this->container['hash_or_tx_id'];
    }

    /**
     * Sets hash_or_tx_id
     *
     * @param string|null $hash_or_tx_id hash_or_tx_id
     *
     * @return self
     */
    public function setHashOrTxId($hash_or_tx_id)
    {
        $this->container['hash_or_tx_id'] = $hash_or_tx_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


