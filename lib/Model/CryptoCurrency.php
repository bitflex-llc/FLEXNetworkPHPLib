<?php
/**
 * CryptoCurrency
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CryptoCurrency Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CryptoCurrency implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CryptoCurrency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'short_name' => 'string',
        'currency_type' => '\OpenAPI\Client\Model\Type',
        'active' => 'bool',
        'deposit_disabled' => 'bool',
        'withdraw_disabled' => 'bool',
        'coin_market_cap_id' => 'int',
        'coin_market_cap_usd_price' => 'double',
        'coin_market_cap_last_update' => 'int',
        'coin_market_cap_max_supply' => 'int',
        'coin_market_cap_total_supply' => 'int',
        'coin_market_cap_curculating_supply' => 'int',
        'coin_market_cap_description' => 'string',
        'coin_market_cap_issue_date' => '\DateTime',
        'coin_market_cap_exploler_url' => 'string',
        'image' => 'string',
        'is_quote_currency' => 'bool',
        'block_exploler_tx_id_url' => 'string',
        'withdraw_currency_fee' => 'double',
        'confirmation_count' => 'int',
        'minimum_trade_amount' => 'double',
        'min_withdraw' => 'double',
        'max_withdraw' => 'double',
        'withdrawable_admin_fee' => 'double',
        'minimum_deposit' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'short_name' => null,
        'currency_type' => null,
        'active' => null,
        'deposit_disabled' => null,
        'withdraw_disabled' => null,
        'coin_market_cap_id' => 'int32',
        'coin_market_cap_usd_price' => 'double',
        'coin_market_cap_last_update' => 'int64',
        'coin_market_cap_max_supply' => 'int64',
        'coin_market_cap_total_supply' => 'int64',
        'coin_market_cap_curculating_supply' => 'int64',
        'coin_market_cap_description' => null,
        'coin_market_cap_issue_date' => 'date-time',
        'coin_market_cap_exploler_url' => null,
        'image' => null,
        'is_quote_currency' => null,
        'block_exploler_tx_id_url' => null,
        'withdraw_currency_fee' => 'double',
        'confirmation_count' => 'int32',
        'minimum_trade_amount' => 'double',
        'min_withdraw' => 'double',
        'max_withdraw' => 'double',
        'withdrawable_admin_fee' => 'double',
        'minimum_deposit' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'short_name' => 'shortName',
        'currency_type' => 'currencyType',
        'active' => 'active',
        'deposit_disabled' => 'depositDisabled',
        'withdraw_disabled' => 'withdrawDisabled',
        'coin_market_cap_id' => 'coinMarketCapId',
        'coin_market_cap_usd_price' => 'coinMarketCapUsdPrice',
        'coin_market_cap_last_update' => 'coinMarketCapLastUpdate',
        'coin_market_cap_max_supply' => 'coinMarketCapMaxSupply',
        'coin_market_cap_total_supply' => 'coinMarketCapTotalSupply',
        'coin_market_cap_curculating_supply' => 'coinMarketCapCurculatingSupply',
        'coin_market_cap_description' => 'coinMarketCapDescription',
        'coin_market_cap_issue_date' => 'coinMarketCapIssueDate',
        'coin_market_cap_exploler_url' => 'coinMarketCapExplolerUrl',
        'image' => 'image',
        'is_quote_currency' => 'isQuoteCurrency',
        'block_exploler_tx_id_url' => 'blockExplolerTxIdUrl',
        'withdraw_currency_fee' => 'withdrawCurrencyFee',
        'confirmation_count' => 'confirmationCount',
        'minimum_trade_amount' => 'minimumTradeAmount',
        'min_withdraw' => 'minWithdraw',
        'max_withdraw' => 'maxWithdraw',
        'withdrawable_admin_fee' => 'withdrawableAdminFee',
        'minimum_deposit' => 'minimumDeposit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'short_name' => 'setShortName',
        'currency_type' => 'setCurrencyType',
        'active' => 'setActive',
        'deposit_disabled' => 'setDepositDisabled',
        'withdraw_disabled' => 'setWithdrawDisabled',
        'coin_market_cap_id' => 'setCoinMarketCapId',
        'coin_market_cap_usd_price' => 'setCoinMarketCapUsdPrice',
        'coin_market_cap_last_update' => 'setCoinMarketCapLastUpdate',
        'coin_market_cap_max_supply' => 'setCoinMarketCapMaxSupply',
        'coin_market_cap_total_supply' => 'setCoinMarketCapTotalSupply',
        'coin_market_cap_curculating_supply' => 'setCoinMarketCapCurculatingSupply',
        'coin_market_cap_description' => 'setCoinMarketCapDescription',
        'coin_market_cap_issue_date' => 'setCoinMarketCapIssueDate',
        'coin_market_cap_exploler_url' => 'setCoinMarketCapExplolerUrl',
        'image' => 'setImage',
        'is_quote_currency' => 'setIsQuoteCurrency',
        'block_exploler_tx_id_url' => 'setBlockExplolerTxIdUrl',
        'withdraw_currency_fee' => 'setWithdrawCurrencyFee',
        'confirmation_count' => 'setConfirmationCount',
        'minimum_trade_amount' => 'setMinimumTradeAmount',
        'min_withdraw' => 'setMinWithdraw',
        'max_withdraw' => 'setMaxWithdraw',
        'withdrawable_admin_fee' => 'setWithdrawableAdminFee',
        'minimum_deposit' => 'setMinimumDeposit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'short_name' => 'getShortName',
        'currency_type' => 'getCurrencyType',
        'active' => 'getActive',
        'deposit_disabled' => 'getDepositDisabled',
        'withdraw_disabled' => 'getWithdrawDisabled',
        'coin_market_cap_id' => 'getCoinMarketCapId',
        'coin_market_cap_usd_price' => 'getCoinMarketCapUsdPrice',
        'coin_market_cap_last_update' => 'getCoinMarketCapLastUpdate',
        'coin_market_cap_max_supply' => 'getCoinMarketCapMaxSupply',
        'coin_market_cap_total_supply' => 'getCoinMarketCapTotalSupply',
        'coin_market_cap_curculating_supply' => 'getCoinMarketCapCurculatingSupply',
        'coin_market_cap_description' => 'getCoinMarketCapDescription',
        'coin_market_cap_issue_date' => 'getCoinMarketCapIssueDate',
        'coin_market_cap_exploler_url' => 'getCoinMarketCapExplolerUrl',
        'image' => 'getImage',
        'is_quote_currency' => 'getIsQuoteCurrency',
        'block_exploler_tx_id_url' => 'getBlockExplolerTxIdUrl',
        'withdraw_currency_fee' => 'getWithdrawCurrencyFee',
        'confirmation_count' => 'getConfirmationCount',
        'minimum_trade_amount' => 'getMinimumTradeAmount',
        'min_withdraw' => 'getMinWithdraw',
        'max_withdraw' => 'getMaxWithdraw',
        'withdrawable_admin_fee' => 'getWithdrawableAdminFee',
        'minimum_deposit' => 'getMinimumDeposit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['short_name'] = $data['short_name'] ?? null;
        $this->container['currency_type'] = $data['currency_type'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['deposit_disabled'] = $data['deposit_disabled'] ?? null;
        $this->container['withdraw_disabled'] = $data['withdraw_disabled'] ?? null;
        $this->container['coin_market_cap_id'] = $data['coin_market_cap_id'] ?? null;
        $this->container['coin_market_cap_usd_price'] = $data['coin_market_cap_usd_price'] ?? null;
        $this->container['coin_market_cap_last_update'] = $data['coin_market_cap_last_update'] ?? null;
        $this->container['coin_market_cap_max_supply'] = $data['coin_market_cap_max_supply'] ?? null;
        $this->container['coin_market_cap_total_supply'] = $data['coin_market_cap_total_supply'] ?? null;
        $this->container['coin_market_cap_curculating_supply'] = $data['coin_market_cap_curculating_supply'] ?? null;
        $this->container['coin_market_cap_description'] = $data['coin_market_cap_description'] ?? null;
        $this->container['coin_market_cap_issue_date'] = $data['coin_market_cap_issue_date'] ?? null;
        $this->container['coin_market_cap_exploler_url'] = $data['coin_market_cap_exploler_url'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['is_quote_currency'] = $data['is_quote_currency'] ?? null;
        $this->container['block_exploler_tx_id_url'] = $data['block_exploler_tx_id_url'] ?? null;
        $this->container['withdraw_currency_fee'] = $data['withdraw_currency_fee'] ?? null;
        $this->container['confirmation_count'] = $data['confirmation_count'] ?? null;
        $this->container['minimum_trade_amount'] = $data['minimum_trade_amount'] ?? null;
        $this->container['min_withdraw'] = $data['min_withdraw'] ?? null;
        $this->container['max_withdraw'] = $data['max_withdraw'] ?? null;
        $this->container['withdrawable_admin_fee'] = $data['withdrawable_admin_fee'] ?? null;
        $this->container['minimum_deposit'] = $data['minimum_deposit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string|null $short_name short_name
     *
     * @return self
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return \OpenAPI\Client\Model\Type|null
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param \OpenAPI\Client\Model\Type|null $currency_type currency_type
     *
     * @return self
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets deposit_disabled
     *
     * @return bool|null
     */
    public function getDepositDisabled()
    {
        return $this->container['deposit_disabled'];
    }

    /**
     * Sets deposit_disabled
     *
     * @param bool|null $deposit_disabled deposit_disabled
     *
     * @return self
     */
    public function setDepositDisabled($deposit_disabled)
    {
        $this->container['deposit_disabled'] = $deposit_disabled;

        return $this;
    }

    /**
     * Gets withdraw_disabled
     *
     * @return bool|null
     */
    public function getWithdrawDisabled()
    {
        return $this->container['withdraw_disabled'];
    }

    /**
     * Sets withdraw_disabled
     *
     * @param bool|null $withdraw_disabled withdraw_disabled
     *
     * @return self
     */
    public function setWithdrawDisabled($withdraw_disabled)
    {
        $this->container['withdraw_disabled'] = $withdraw_disabled;

        return $this;
    }

    /**
     * Gets coin_market_cap_id
     *
     * @return int|null
     */
    public function getCoinMarketCapId()
    {
        return $this->container['coin_market_cap_id'];
    }

    /**
     * Sets coin_market_cap_id
     *
     * @param int|null $coin_market_cap_id coin_market_cap_id
     *
     * @return self
     */
    public function setCoinMarketCapId($coin_market_cap_id)
    {
        $this->container['coin_market_cap_id'] = $coin_market_cap_id;

        return $this;
    }

    /**
     * Gets coin_market_cap_usd_price
     *
     * @return double|null
     */
    public function getCoinMarketCapUsdPrice()
    {
        return $this->container['coin_market_cap_usd_price'];
    }

    /**
     * Sets coin_market_cap_usd_price
     *
     * @param double|null $coin_market_cap_usd_price coin_market_cap_usd_price
     *
     * @return self
     */
    public function setCoinMarketCapUsdPrice($coin_market_cap_usd_price)
    {
        $this->container['coin_market_cap_usd_price'] = $coin_market_cap_usd_price;

        return $this;
    }

    /**
     * Gets coin_market_cap_last_update
     *
     * @return int|null
     */
    public function getCoinMarketCapLastUpdate()
    {
        return $this->container['coin_market_cap_last_update'];
    }

    /**
     * Sets coin_market_cap_last_update
     *
     * @param int|null $coin_market_cap_last_update coin_market_cap_last_update
     *
     * @return self
     */
    public function setCoinMarketCapLastUpdate($coin_market_cap_last_update)
    {
        $this->container['coin_market_cap_last_update'] = $coin_market_cap_last_update;

        return $this;
    }

    /**
     * Gets coin_market_cap_max_supply
     *
     * @return int|null
     */
    public function getCoinMarketCapMaxSupply()
    {
        return $this->container['coin_market_cap_max_supply'];
    }

    /**
     * Sets coin_market_cap_max_supply
     *
     * @param int|null $coin_market_cap_max_supply coin_market_cap_max_supply
     *
     * @return self
     */
    public function setCoinMarketCapMaxSupply($coin_market_cap_max_supply)
    {
        $this->container['coin_market_cap_max_supply'] = $coin_market_cap_max_supply;

        return $this;
    }

    /**
     * Gets coin_market_cap_total_supply
     *
     * @return int|null
     */
    public function getCoinMarketCapTotalSupply()
    {
        return $this->container['coin_market_cap_total_supply'];
    }

    /**
     * Sets coin_market_cap_total_supply
     *
     * @param int|null $coin_market_cap_total_supply coin_market_cap_total_supply
     *
     * @return self
     */
    public function setCoinMarketCapTotalSupply($coin_market_cap_total_supply)
    {
        $this->container['coin_market_cap_total_supply'] = $coin_market_cap_total_supply;

        return $this;
    }

    /**
     * Gets coin_market_cap_curculating_supply
     *
     * @return int|null
     */
    public function getCoinMarketCapCurculatingSupply()
    {
        return $this->container['coin_market_cap_curculating_supply'];
    }

    /**
     * Sets coin_market_cap_curculating_supply
     *
     * @param int|null $coin_market_cap_curculating_supply coin_market_cap_curculating_supply
     *
     * @return self
     */
    public function setCoinMarketCapCurculatingSupply($coin_market_cap_curculating_supply)
    {
        $this->container['coin_market_cap_curculating_supply'] = $coin_market_cap_curculating_supply;

        return $this;
    }

    /**
     * Gets coin_market_cap_description
     *
     * @return string|null
     */
    public function getCoinMarketCapDescription()
    {
        return $this->container['coin_market_cap_description'];
    }

    /**
     * Sets coin_market_cap_description
     *
     * @param string|null $coin_market_cap_description coin_market_cap_description
     *
     * @return self
     */
    public function setCoinMarketCapDescription($coin_market_cap_description)
    {
        $this->container['coin_market_cap_description'] = $coin_market_cap_description;

        return $this;
    }

    /**
     * Gets coin_market_cap_issue_date
     *
     * @return \DateTime|null
     */
    public function getCoinMarketCapIssueDate()
    {
        return $this->container['coin_market_cap_issue_date'];
    }

    /**
     * Sets coin_market_cap_issue_date
     *
     * @param \DateTime|null $coin_market_cap_issue_date coin_market_cap_issue_date
     *
     * @return self
     */
    public function setCoinMarketCapIssueDate($coin_market_cap_issue_date)
    {
        $this->container['coin_market_cap_issue_date'] = $coin_market_cap_issue_date;

        return $this;
    }

    /**
     * Gets coin_market_cap_exploler_url
     *
     * @return string|null
     */
    public function getCoinMarketCapExplolerUrl()
    {
        return $this->container['coin_market_cap_exploler_url'];
    }

    /**
     * Sets coin_market_cap_exploler_url
     *
     * @param string|null $coin_market_cap_exploler_url coin_market_cap_exploler_url
     *
     * @return self
     */
    public function setCoinMarketCapExplolerUrl($coin_market_cap_exploler_url)
    {
        $this->container['coin_market_cap_exploler_url'] = $coin_market_cap_exploler_url;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets is_quote_currency
     *
     * @return bool|null
     */
    public function getIsQuoteCurrency()
    {
        return $this->container['is_quote_currency'];
    }

    /**
     * Sets is_quote_currency
     *
     * @param bool|null $is_quote_currency is_quote_currency
     *
     * @return self
     */
    public function setIsQuoteCurrency($is_quote_currency)
    {
        $this->container['is_quote_currency'] = $is_quote_currency;

        return $this;
    }

    /**
     * Gets block_exploler_tx_id_url
     *
     * @return string|null
     */
    public function getBlockExplolerTxIdUrl()
    {
        return $this->container['block_exploler_tx_id_url'];
    }

    /**
     * Sets block_exploler_tx_id_url
     *
     * @param string|null $block_exploler_tx_id_url block_exploler_tx_id_url
     *
     * @return self
     */
    public function setBlockExplolerTxIdUrl($block_exploler_tx_id_url)
    {
        $this->container['block_exploler_tx_id_url'] = $block_exploler_tx_id_url;

        return $this;
    }

    /**
     * Gets withdraw_currency_fee
     *
     * @return double|null
     */
    public function getWithdrawCurrencyFee()
    {
        return $this->container['withdraw_currency_fee'];
    }

    /**
     * Sets withdraw_currency_fee
     *
     * @param double|null $withdraw_currency_fee withdraw_currency_fee
     *
     * @return self
     */
    public function setWithdrawCurrencyFee($withdraw_currency_fee)
    {
        $this->container['withdraw_currency_fee'] = $withdraw_currency_fee;

        return $this;
    }

    /**
     * Gets confirmation_count
     *
     * @return int|null
     */
    public function getConfirmationCount()
    {
        return $this->container['confirmation_count'];
    }

    /**
     * Sets confirmation_count
     *
     * @param int|null $confirmation_count confirmation_count
     *
     * @return self
     */
    public function setConfirmationCount($confirmation_count)
    {
        $this->container['confirmation_count'] = $confirmation_count;

        return $this;
    }

    /**
     * Gets minimum_trade_amount
     *
     * @return double|null
     */
    public function getMinimumTradeAmount()
    {
        return $this->container['minimum_trade_amount'];
    }

    /**
     * Sets minimum_trade_amount
     *
     * @param double|null $minimum_trade_amount minimum_trade_amount
     *
     * @return self
     */
    public function setMinimumTradeAmount($minimum_trade_amount)
    {
        $this->container['minimum_trade_amount'] = $minimum_trade_amount;

        return $this;
    }

    /**
     * Gets min_withdraw
     *
     * @return double|null
     */
    public function getMinWithdraw()
    {
        return $this->container['min_withdraw'];
    }

    /**
     * Sets min_withdraw
     *
     * @param double|null $min_withdraw min_withdraw
     *
     * @return self
     */
    public function setMinWithdraw($min_withdraw)
    {
        $this->container['min_withdraw'] = $min_withdraw;

        return $this;
    }

    /**
     * Gets max_withdraw
     *
     * @return double|null
     */
    public function getMaxWithdraw()
    {
        return $this->container['max_withdraw'];
    }

    /**
     * Sets max_withdraw
     *
     * @param double|null $max_withdraw max_withdraw
     *
     * @return self
     */
    public function setMaxWithdraw($max_withdraw)
    {
        $this->container['max_withdraw'] = $max_withdraw;

        return $this;
    }

    /**
     * Gets withdrawable_admin_fee
     *
     * @return double|null
     */
    public function getWithdrawableAdminFee()
    {
        return $this->container['withdrawable_admin_fee'];
    }

    /**
     * Sets withdrawable_admin_fee
     *
     * @param double|null $withdrawable_admin_fee withdrawable_admin_fee
     *
     * @return self
     */
    public function setWithdrawableAdminFee($withdrawable_admin_fee)
    {
        $this->container['withdrawable_admin_fee'] = $withdrawable_admin_fee;

        return $this;
    }

    /**
     * Gets minimum_deposit
     *
     * @return double|null
     */
    public function getMinimumDeposit()
    {
        return $this->container['minimum_deposit'];
    }

    /**
     * Sets minimum_deposit
     *
     * @param double|null $minimum_deposit minimum_deposit
     *
     * @return self
     */
    public function setMinimumDeposit($minimum_deposit)
    {
        $this->container['minimum_deposit'] = $minimum_deposit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


