<?php
/**
 * SetupCode
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SetupCode Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SetupCode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SetupCode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account' => 'string',
        'account_secret_key' => 'string',
        'manual_entry_key' => 'string',
        'qr_code_setup_image_url' => 'string',
        'otp_clean_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account' => null,
        'account_secret_key' => null,
        'manual_entry_key' => null,
        'qr_code_setup_image_url' => null,
        'otp_clean_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
        'account_secret_key' => 'accountSecretKey',
        'manual_entry_key' => 'manualEntryKey',
        'qr_code_setup_image_url' => 'qrCodeSetupImageUrl',
        'otp_clean_url' => 'otpCleanUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
        'account_secret_key' => 'setAccountSecretKey',
        'manual_entry_key' => 'setManualEntryKey',
        'qr_code_setup_image_url' => 'setQrCodeSetupImageUrl',
        'otp_clean_url' => 'setOtpCleanUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
        'account_secret_key' => 'getAccountSecretKey',
        'manual_entry_key' => 'getManualEntryKey',
        'qr_code_setup_image_url' => 'getQrCodeSetupImageUrl',
        'otp_clean_url' => 'getOtpCleanUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = $data['account'] ?? null;
        $this->container['account_secret_key'] = $data['account_secret_key'] ?? null;
        $this->container['manual_entry_key'] = $data['manual_entry_key'] ?? null;
        $this->container['qr_code_setup_image_url'] = $data['qr_code_setup_image_url'] ?? null;
        $this->container['otp_clean_url'] = $data['otp_clean_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets account_secret_key
     *
     * @return string|null
     */
    public function getAccountSecretKey()
    {
        return $this->container['account_secret_key'];
    }

    /**
     * Sets account_secret_key
     *
     * @param string|null $account_secret_key account_secret_key
     *
     * @return self
     */
    public function setAccountSecretKey($account_secret_key)
    {
        $this->container['account_secret_key'] = $account_secret_key;

        return $this;
    }

    /**
     * Gets manual_entry_key
     *
     * @return string|null
     */
    public function getManualEntryKey()
    {
        return $this->container['manual_entry_key'];
    }

    /**
     * Sets manual_entry_key
     *
     * @param string|null $manual_entry_key manual_entry_key
     *
     * @return self
     */
    public function setManualEntryKey($manual_entry_key)
    {
        $this->container['manual_entry_key'] = $manual_entry_key;

        return $this;
    }

    /**
     * Gets qr_code_setup_image_url
     *
     * @return string|null
     */
    public function getQrCodeSetupImageUrl()
    {
        return $this->container['qr_code_setup_image_url'];
    }

    /**
     * Sets qr_code_setup_image_url
     *
     * @param string|null $qr_code_setup_image_url qr_code_setup_image_url
     *
     * @return self
     */
    public function setQrCodeSetupImageUrl($qr_code_setup_image_url)
    {
        $this->container['qr_code_setup_image_url'] = $qr_code_setup_image_url;

        return $this;
    }

    /**
     * Gets otp_clean_url
     *
     * @return string|null
     */
    public function getOtpCleanUrl()
    {
        return $this->container['otp_clean_url'];
    }

    /**
     * Sets otp_clean_url
     *
     * @param string|null $otp_clean_url otp_clean_url
     *
     * @return self
     */
    public function setOtpCleanUrl($otp_clean_url)
    {
        $this->container['otp_clean_url'] = $otp_clean_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


