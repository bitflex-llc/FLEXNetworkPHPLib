<?php
/**
 * GetWithdrawResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetWithdrawResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class GetWithdrawResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetWithdrawResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'long_name' => 'string',
        'total_amount' => 'double',
        'available_amount' => 'double',
        'maximum_withdraw_amount' => 'double',
        'withdraw_fee_percent' => 'double',
        'withdraw_fee' => 'double',
        'need_destination_tag' => 'bool',
        'destination_tag_name' => 'string',
        'withdraw_disabled' => 'bool',
        'error_code' => '\OpenAPI\Client\Model\BalanceErrorCode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'long_name' => null,
        'total_amount' => 'double',
        'available_amount' => 'double',
        'maximum_withdraw_amount' => 'double',
        'withdraw_fee_percent' => 'double',
        'withdraw_fee' => 'double',
        'need_destination_tag' => null,
        'destination_tag_name' => null,
        'withdraw_disabled' => null,
        'error_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'long_name' => 'longName',
        'total_amount' => 'totalAmount',
        'available_amount' => 'availableAmount',
        'maximum_withdraw_amount' => 'maximumWithdrawAmount',
        'withdraw_fee_percent' => 'withdrawFeePercent',
        'withdraw_fee' => 'withdrawFee',
        'need_destination_tag' => 'needDestinationTag',
        'destination_tag_name' => 'destinationTagName',
        'withdraw_disabled' => 'withdrawDisabled',
        'error_code' => 'errorCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'long_name' => 'setLongName',
        'total_amount' => 'setTotalAmount',
        'available_amount' => 'setAvailableAmount',
        'maximum_withdraw_amount' => 'setMaximumWithdrawAmount',
        'withdraw_fee_percent' => 'setWithdrawFeePercent',
        'withdraw_fee' => 'setWithdrawFee',
        'need_destination_tag' => 'setNeedDestinationTag',
        'destination_tag_name' => 'setDestinationTagName',
        'withdraw_disabled' => 'setWithdrawDisabled',
        'error_code' => 'setErrorCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'long_name' => 'getLongName',
        'total_amount' => 'getTotalAmount',
        'available_amount' => 'getAvailableAmount',
        'maximum_withdraw_amount' => 'getMaximumWithdrawAmount',
        'withdraw_fee_percent' => 'getWithdrawFeePercent',
        'withdraw_fee' => 'getWithdrawFee',
        'need_destination_tag' => 'getNeedDestinationTag',
        'destination_tag_name' => 'getDestinationTagName',
        'withdraw_disabled' => 'getWithdrawDisabled',
        'error_code' => 'getErrorCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['long_name'] = $data['long_name'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['available_amount'] = $data['available_amount'] ?? null;
        $this->container['maximum_withdraw_amount'] = $data['maximum_withdraw_amount'] ?? null;
        $this->container['withdraw_fee_percent'] = $data['withdraw_fee_percent'] ?? null;
        $this->container['withdraw_fee'] = $data['withdraw_fee'] ?? null;
        $this->container['need_destination_tag'] = $data['need_destination_tag'] ?? null;
        $this->container['destination_tag_name'] = $data['destination_tag_name'] ?? null;
        $this->container['withdraw_disabled'] = $data['withdraw_disabled'] ?? null;
        $this->container['error_code'] = $data['error_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets long_name
     *
     * @return string|null
     */
    public function getLongName()
    {
        return $this->container['long_name'];
    }

    /**
     * Sets long_name
     *
     * @param string|null $long_name long_name
     *
     * @return self
     */
    public function setLongName($long_name)
    {
        $this->container['long_name'] = $long_name;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets available_amount
     *
     * @return double|null
     */
    public function getAvailableAmount()
    {
        return $this->container['available_amount'];
    }

    /**
     * Sets available_amount
     *
     * @param double|null $available_amount available_amount
     *
     * @return self
     */
    public function setAvailableAmount($available_amount)
    {
        $this->container['available_amount'] = $available_amount;

        return $this;
    }

    /**
     * Gets maximum_withdraw_amount
     *
     * @return double|null
     */
    public function getMaximumWithdrawAmount()
    {
        return $this->container['maximum_withdraw_amount'];
    }

    /**
     * Sets maximum_withdraw_amount
     *
     * @param double|null $maximum_withdraw_amount maximum_withdraw_amount
     *
     * @return self
     */
    public function setMaximumWithdrawAmount($maximum_withdraw_amount)
    {
        $this->container['maximum_withdraw_amount'] = $maximum_withdraw_amount;

        return $this;
    }

    /**
     * Gets withdraw_fee_percent
     *
     * @return double|null
     */
    public function getWithdrawFeePercent()
    {
        return $this->container['withdraw_fee_percent'];
    }

    /**
     * Sets withdraw_fee_percent
     *
     * @param double|null $withdraw_fee_percent withdraw_fee_percent
     *
     * @return self
     */
    public function setWithdrawFeePercent($withdraw_fee_percent)
    {
        $this->container['withdraw_fee_percent'] = $withdraw_fee_percent;

        return $this;
    }

    /**
     * Gets withdraw_fee
     *
     * @return double|null
     */
    public function getWithdrawFee()
    {
        return $this->container['withdraw_fee'];
    }

    /**
     * Sets withdraw_fee
     *
     * @param double|null $withdraw_fee withdraw_fee
     *
     * @return self
     */
    public function setWithdrawFee($withdraw_fee)
    {
        $this->container['withdraw_fee'] = $withdraw_fee;

        return $this;
    }

    /**
     * Gets need_destination_tag
     *
     * @return bool|null
     */
    public function getNeedDestinationTag()
    {
        return $this->container['need_destination_tag'];
    }

    /**
     * Sets need_destination_tag
     *
     * @param bool|null $need_destination_tag need_destination_tag
     *
     * @return self
     */
    public function setNeedDestinationTag($need_destination_tag)
    {
        $this->container['need_destination_tag'] = $need_destination_tag;

        return $this;
    }

    /**
     * Gets destination_tag_name
     *
     * @return string|null
     */
    public function getDestinationTagName()
    {
        return $this->container['destination_tag_name'];
    }

    /**
     * Sets destination_tag_name
     *
     * @param string|null $destination_tag_name destination_tag_name
     *
     * @return self
     */
    public function setDestinationTagName($destination_tag_name)
    {
        $this->container['destination_tag_name'] = $destination_tag_name;

        return $this;
    }

    /**
     * Gets withdraw_disabled
     *
     * @return bool|null
     */
    public function getWithdrawDisabled()
    {
        return $this->container['withdraw_disabled'];
    }

    /**
     * Sets withdraw_disabled
     *
     * @param bool|null $withdraw_disabled withdraw_disabled
     *
     * @return self
     */
    public function setWithdrawDisabled($withdraw_disabled)
    {
        $this->container['withdraw_disabled'] = $withdraw_disabled;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return \OpenAPI\Client\Model\BalanceErrorCode|null
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param \OpenAPI\Client\Model\BalanceErrorCode|null $error_code error_code
     *
     * @return self
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


