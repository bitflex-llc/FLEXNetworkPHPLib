<?php
/**
 * SummaryResponseModel
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SummaryResponseModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SummaryResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SummaryResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'trading_pairs' => 'string',
        'last_price' => 'double',
        'lowest_ask' => 'double',
        'highest_bid' => 'double',
        'base_volume' => 'double',
        'quote_volume' => 'double',
        'price_change_percent_24h' => 'double',
        'highest_price_24h' => 'double',
        'lowest_price_24h' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'trading_pairs' => null,
        'last_price' => 'double',
        'lowest_ask' => 'double',
        'highest_bid' => 'double',
        'base_volume' => 'double',
        'quote_volume' => 'double',
        'price_change_percent_24h' => 'double',
        'highest_price_24h' => 'double',
        'lowest_price_24h' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trading_pairs' => 'trading_pairs',
        'last_price' => 'last_price',
        'lowest_ask' => 'lowest_ask',
        'highest_bid' => 'highest_bid',
        'base_volume' => 'base_volume',
        'quote_volume' => 'quote_volume',
        'price_change_percent_24h' => 'price_change_percent_24h',
        'highest_price_24h' => 'highest_price_24h',
        'lowest_price_24h' => 'lowest_price_24h'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trading_pairs' => 'setTradingPairs',
        'last_price' => 'setLastPrice',
        'lowest_ask' => 'setLowestAsk',
        'highest_bid' => 'setHighestBid',
        'base_volume' => 'setBaseVolume',
        'quote_volume' => 'setQuoteVolume',
        'price_change_percent_24h' => 'setPriceChangePercent24h',
        'highest_price_24h' => 'setHighestPrice24h',
        'lowest_price_24h' => 'setLowestPrice24h'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trading_pairs' => 'getTradingPairs',
        'last_price' => 'getLastPrice',
        'lowest_ask' => 'getLowestAsk',
        'highest_bid' => 'getHighestBid',
        'base_volume' => 'getBaseVolume',
        'quote_volume' => 'getQuoteVolume',
        'price_change_percent_24h' => 'getPriceChangePercent24h',
        'highest_price_24h' => 'getHighestPrice24h',
        'lowest_price_24h' => 'getLowestPrice24h'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trading_pairs'] = $data['trading_pairs'] ?? null;
        $this->container['last_price'] = $data['last_price'] ?? null;
        $this->container['lowest_ask'] = $data['lowest_ask'] ?? null;
        $this->container['highest_bid'] = $data['highest_bid'] ?? null;
        $this->container['base_volume'] = $data['base_volume'] ?? null;
        $this->container['quote_volume'] = $data['quote_volume'] ?? null;
        $this->container['price_change_percent_24h'] = $data['price_change_percent_24h'] ?? null;
        $this->container['highest_price_24h'] = $data['highest_price_24h'] ?? null;
        $this->container['lowest_price_24h'] = $data['lowest_price_24h'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trading_pairs
     *
     * @return string|null
     */
    public function getTradingPairs()
    {
        return $this->container['trading_pairs'];
    }

    /**
     * Sets trading_pairs
     *
     * @param string|null $trading_pairs trading_pairs
     *
     * @return self
     */
    public function setTradingPairs($trading_pairs)
    {
        $this->container['trading_pairs'] = $trading_pairs;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return double|null
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param double|null $last_price last_price
     *
     * @return self
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets lowest_ask
     *
     * @return double|null
     */
    public function getLowestAsk()
    {
        return $this->container['lowest_ask'];
    }

    /**
     * Sets lowest_ask
     *
     * @param double|null $lowest_ask lowest_ask
     *
     * @return self
     */
    public function setLowestAsk($lowest_ask)
    {
        $this->container['lowest_ask'] = $lowest_ask;

        return $this;
    }

    /**
     * Gets highest_bid
     *
     * @return double|null
     */
    public function getHighestBid()
    {
        return $this->container['highest_bid'];
    }

    /**
     * Sets highest_bid
     *
     * @param double|null $highest_bid highest_bid
     *
     * @return self
     */
    public function setHighestBid($highest_bid)
    {
        $this->container['highest_bid'] = $highest_bid;

        return $this;
    }

    /**
     * Gets base_volume
     *
     * @return double|null
     */
    public function getBaseVolume()
    {
        return $this->container['base_volume'];
    }

    /**
     * Sets base_volume
     *
     * @param double|null $base_volume base_volume
     *
     * @return self
     */
    public function setBaseVolume($base_volume)
    {
        $this->container['base_volume'] = $base_volume;

        return $this;
    }

    /**
     * Gets quote_volume
     *
     * @return double|null
     */
    public function getQuoteVolume()
    {
        return $this->container['quote_volume'];
    }

    /**
     * Sets quote_volume
     *
     * @param double|null $quote_volume quote_volume
     *
     * @return self
     */
    public function setQuoteVolume($quote_volume)
    {
        $this->container['quote_volume'] = $quote_volume;

        return $this;
    }

    /**
     * Gets price_change_percent_24h
     *
     * @return double|null
     */
    public function getPriceChangePercent24h()
    {
        return $this->container['price_change_percent_24h'];
    }

    /**
     * Sets price_change_percent_24h
     *
     * @param double|null $price_change_percent_24h price_change_percent_24h
     *
     * @return self
     */
    public function setPriceChangePercent24h($price_change_percent_24h)
    {
        $this->container['price_change_percent_24h'] = $price_change_percent_24h;

        return $this;
    }

    /**
     * Gets highest_price_24h
     *
     * @return double|null
     */
    public function getHighestPrice24h()
    {
        return $this->container['highest_price_24h'];
    }

    /**
     * Sets highest_price_24h
     *
     * @param double|null $highest_price_24h highest_price_24h
     *
     * @return self
     */
    public function setHighestPrice24h($highest_price_24h)
    {
        $this->container['highest_price_24h'] = $highest_price_24h;

        return $this;
    }

    /**
     * Gets lowest_price_24h
     *
     * @return double|null
     */
    public function getLowestPrice24h()
    {
        return $this->container['lowest_price_24h'];
    }

    /**
     * Sets lowest_price_24h
     *
     * @param double|null $lowest_price_24h lowest_price_24h
     *
     * @return self
     */
    public function setLowestPrice24h($lowest_price_24h)
    {
        $this->container['lowest_price_24h'] = $lowest_price_24h;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


