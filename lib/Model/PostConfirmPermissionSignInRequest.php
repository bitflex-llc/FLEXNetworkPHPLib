<?php
/**
 * PostConfirmPermissionSignInRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PostConfirmPermissionSignInRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PostConfirmPermissionSignInRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostConfirmPermissionSignInRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'is_trading_enabled' => 'bool',
        'is_margin_trading_enabled' => 'bool',
        'is_withdraw_enabled' => 'bool',
        'is_datachange_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'is_trading_enabled' => null,
        'is_margin_trading_enabled' => null,
        'is_withdraw_enabled' => null,
        'is_datachange_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'is_trading_enabled' => 'isTradingEnabled',
        'is_margin_trading_enabled' => 'isMarginTradingEnabled',
        'is_withdraw_enabled' => 'isWithdrawEnabled',
        'is_datachange_enabled' => 'isDatachangeEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_trading_enabled' => 'setIsTradingEnabled',
        'is_margin_trading_enabled' => 'setIsMarginTradingEnabled',
        'is_withdraw_enabled' => 'setIsWithdrawEnabled',
        'is_datachange_enabled' => 'setIsDatachangeEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_trading_enabled' => 'getIsTradingEnabled',
        'is_margin_trading_enabled' => 'getIsMarginTradingEnabled',
        'is_withdraw_enabled' => 'getIsWithdrawEnabled',
        'is_datachange_enabled' => 'getIsDatachangeEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['is_trading_enabled'] = $data['is_trading_enabled'] ?? null;
        $this->container['is_margin_trading_enabled'] = $data['is_margin_trading_enabled'] ?? null;
        $this->container['is_withdraw_enabled'] = $data['is_withdraw_enabled'] ?? null;
        $this->container['is_datachange_enabled'] = $data['is_datachange_enabled'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_trading_enabled
     *
     * @return bool|null
     */
    public function getIsTradingEnabled()
    {
        return $this->container['is_trading_enabled'];
    }

    /**
     * Sets is_trading_enabled
     *
     * @param bool|null $is_trading_enabled is_trading_enabled
     *
     * @return self
     */
    public function setIsTradingEnabled($is_trading_enabled)
    {
        $this->container['is_trading_enabled'] = $is_trading_enabled;

        return $this;
    }

    /**
     * Gets is_margin_trading_enabled
     *
     * @return bool|null
     */
    public function getIsMarginTradingEnabled()
    {
        return $this->container['is_margin_trading_enabled'];
    }

    /**
     * Sets is_margin_trading_enabled
     *
     * @param bool|null $is_margin_trading_enabled is_margin_trading_enabled
     *
     * @return self
     */
    public function setIsMarginTradingEnabled($is_margin_trading_enabled)
    {
        $this->container['is_margin_trading_enabled'] = $is_margin_trading_enabled;

        return $this;
    }

    /**
     * Gets is_withdraw_enabled
     *
     * @return bool|null
     */
    public function getIsWithdrawEnabled()
    {
        return $this->container['is_withdraw_enabled'];
    }

    /**
     * Sets is_withdraw_enabled
     *
     * @param bool|null $is_withdraw_enabled is_withdraw_enabled
     *
     * @return self
     */
    public function setIsWithdrawEnabled($is_withdraw_enabled)
    {
        $this->container['is_withdraw_enabled'] = $is_withdraw_enabled;

        return $this;
    }

    /**
     * Gets is_datachange_enabled
     *
     * @return bool|null
     */
    public function getIsDatachangeEnabled()
    {
        return $this->container['is_datachange_enabled'];
    }

    /**
     * Sets is_datachange_enabled
     *
     * @param bool|null $is_datachange_enabled is_datachange_enabled
     *
     * @return self
     */
    public function setIsDatachangeEnabled($is_datachange_enabled)
    {
        $this->container['is_datachange_enabled'] = $is_datachange_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


