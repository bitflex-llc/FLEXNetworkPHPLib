<?php
/**
 * AskForPermissionRequestModel
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AskForPermissionRequestModel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AskForPermissionRequestModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AskForPermissionRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => '\OpenAPI\Client\Model\DevicePermissionRequestType',
        'bitflex_device_id' => 'string',
        'terminal_signal_r_connection_id' => 'string',
        'user_id' => 'string',
        'ip_address' => 'string',
        'client_info' => '\OpenAPI\Client\Model\ClientInfo',
        'latitude' => 'double',
        'longitude' => 'double',
        'location' => 'string',
        'device_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'bitflex_device_id' => null,
        'terminal_signal_r_connection_id' => null,
        'user_id' => null,
        'ip_address' => null,
        'client_info' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'location' => null,
        'device_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'bitflex_device_id' => 'bitflexDeviceId',
        'terminal_signal_r_connection_id' => 'terminalSignalRConnectionId',
        'user_id' => 'userId',
        'ip_address' => 'ipAddress',
        'client_info' => 'clientInfo',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'location' => 'location',
        'device_description' => 'deviceDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'bitflex_device_id' => 'setBitflexDeviceId',
        'terminal_signal_r_connection_id' => 'setTerminalSignalRConnectionId',
        'user_id' => 'setUserId',
        'ip_address' => 'setIpAddress',
        'client_info' => 'setClientInfo',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'location' => 'setLocation',
        'device_description' => 'setDeviceDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'bitflex_device_id' => 'getBitflexDeviceId',
        'terminal_signal_r_connection_id' => 'getTerminalSignalRConnectionId',
        'user_id' => 'getUserId',
        'ip_address' => 'getIpAddress',
        'client_info' => 'getClientInfo',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'location' => 'getLocation',
        'device_description' => 'getDeviceDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['bitflex_device_id'] = $data['bitflex_device_id'] ?? null;
        $this->container['terminal_signal_r_connection_id'] = $data['terminal_signal_r_connection_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['ip_address'] = $data['ip_address'] ?? null;
        $this->container['client_info'] = $data['client_info'] ?? null;
        $this->container['latitude'] = $data['latitude'] ?? null;
        $this->container['longitude'] = $data['longitude'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['device_description'] = $data['device_description'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DevicePermissionRequestType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DevicePermissionRequestType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bitflex_device_id
     *
     * @return string|null
     */
    public function getBitflexDeviceId()
    {
        return $this->container['bitflex_device_id'];
    }

    /**
     * Sets bitflex_device_id
     *
     * @param string|null $bitflex_device_id bitflex_device_id
     *
     * @return self
     */
    public function setBitflexDeviceId($bitflex_device_id)
    {
        $this->container['bitflex_device_id'] = $bitflex_device_id;

        return $this;
    }

    /**
     * Gets terminal_signal_r_connection_id
     *
     * @return string|null
     */
    public function getTerminalSignalRConnectionId()
    {
        return $this->container['terminal_signal_r_connection_id'];
    }

    /**
     * Sets terminal_signal_r_connection_id
     *
     * @param string|null $terminal_signal_r_connection_id terminal_signal_r_connection_id
     *
     * @return self
     */
    public function setTerminalSignalRConnectionId($terminal_signal_r_connection_id)
    {
        $this->container['terminal_signal_r_connection_id'] = $terminal_signal_r_connection_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string|null $ip_address ip_address
     *
     * @return self
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets client_info
     *
     * @return \OpenAPI\Client\Model\ClientInfo|null
     */
    public function getClientInfo()
    {
        return $this->container['client_info'];
    }

    /**
     * Sets client_info
     *
     * @param \OpenAPI\Client\Model\ClientInfo|null $client_info client_info
     *
     * @return self
     */
    public function setClientInfo($client_info)
    {
        $this->container['client_info'] = $client_info;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double|null $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double|null $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets device_description
     *
     * @return string|null
     */
    public function getDeviceDescription()
    {
        return $this->container['device_description'];
    }

    /**
     * Sets device_description
     *
     * @param string|null $device_description device_description
     *
     * @return self
     */
    public function setDeviceDescription($device_description)
    {
        $this->container['device_description'] = $device_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


