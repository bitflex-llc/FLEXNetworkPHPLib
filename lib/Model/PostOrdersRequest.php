<?php
/**
 * PostOrdersRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BCFLEX API
 *
 * BCFLEX Public API Documentation
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PostOrdersRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PostOrdersRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PostOrdersRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'double',
        'price' => 'double',
        'trade_type' => '\OpenAPI\Client\Model\TradeType',
        'pair_id' => 'int',
        'order_type' => '\OpenAPI\Client\Model\OrderTypes',
        'is_margin' => 'bool',
        'leverage' => 'int',
        'initial_amount' => 'double',
        'initial_price' => 'double',
        'stop_loss_price' => 'double',
        'take_profit_price' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'double',
        'price' => 'double',
        'trade_type' => null,
        'pair_id' => 'int64',
        'order_type' => null,
        'is_margin' => null,
        'leverage' => 'int32',
        'initial_amount' => 'double',
        'initial_price' => 'double',
        'stop_loss_price' => 'double',
        'take_profit_price' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'price' => 'price',
        'trade_type' => 'tradeType',
        'pair_id' => 'pairId',
        'order_type' => 'orderType',
        'is_margin' => 'isMargin',
        'leverage' => 'leverage',
        'initial_amount' => 'initialAmount',
        'initial_price' => 'initialPrice',
        'stop_loss_price' => 'stopLossPrice',
        'take_profit_price' => 'takeProfitPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'price' => 'setPrice',
        'trade_type' => 'setTradeType',
        'pair_id' => 'setPairId',
        'order_type' => 'setOrderType',
        'is_margin' => 'setIsMargin',
        'leverage' => 'setLeverage',
        'initial_amount' => 'setInitialAmount',
        'initial_price' => 'setInitialPrice',
        'stop_loss_price' => 'setStopLossPrice',
        'take_profit_price' => 'setTakeProfitPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'price' => 'getPrice',
        'trade_type' => 'getTradeType',
        'pair_id' => 'getPairId',
        'order_type' => 'getOrderType',
        'is_margin' => 'getIsMargin',
        'leverage' => 'getLeverage',
        'initial_amount' => 'getInitialAmount',
        'initial_price' => 'getInitialPrice',
        'stop_loss_price' => 'getStopLossPrice',
        'take_profit_price' => 'getTakeProfitPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['trade_type'] = $data['trade_type'] ?? null;
        $this->container['pair_id'] = $data['pair_id'] ?? null;
        $this->container['order_type'] = $data['order_type'] ?? null;
        $this->container['is_margin'] = $data['is_margin'] ?? null;
        $this->container['leverage'] = $data['leverage'] ?? null;
        $this->container['initial_amount'] = $data['initial_amount'] ?? null;
        $this->container['initial_price'] = $data['initial_price'] ?? null;
        $this->container['stop_loss_price'] = $data['stop_loss_price'] ?? null;
        $this->container['take_profit_price'] = $data['take_profit_price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return double|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets trade_type
     *
     * @return \OpenAPI\Client\Model\TradeType|null
     */
    public function getTradeType()
    {
        return $this->container['trade_type'];
    }

    /**
     * Sets trade_type
     *
     * @param \OpenAPI\Client\Model\TradeType|null $trade_type trade_type
     *
     * @return self
     */
    public function setTradeType($trade_type)
    {
        $this->container['trade_type'] = $trade_type;

        return $this;
    }

    /**
     * Gets pair_id
     *
     * @return int|null
     */
    public function getPairId()
    {
        return $this->container['pair_id'];
    }

    /**
     * Sets pair_id
     *
     * @param int|null $pair_id pair_id
     *
     * @return self
     */
    public function setPairId($pair_id)
    {
        $this->container['pair_id'] = $pair_id;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return \OpenAPI\Client\Model\OrderTypes|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param \OpenAPI\Client\Model\OrderTypes|null $order_type order_type
     *
     * @return self
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets is_margin
     *
     * @return bool|null
     */
    public function getIsMargin()
    {
        return $this->container['is_margin'];
    }

    /**
     * Sets is_margin
     *
     * @param bool|null $is_margin is_margin
     *
     * @return self
     */
    public function setIsMargin($is_margin)
    {
        $this->container['is_margin'] = $is_margin;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return int|null
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param int|null $leverage leverage
     *
     * @return self
     */
    public function setLeverage($leverage)
    {
        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets initial_amount
     *
     * @return double|null
     */
    public function getInitialAmount()
    {
        return $this->container['initial_amount'];
    }

    /**
     * Sets initial_amount
     *
     * @param double|null $initial_amount initial_amount
     *
     * @return self
     */
    public function setInitialAmount($initial_amount)
    {
        $this->container['initial_amount'] = $initial_amount;

        return $this;
    }

    /**
     * Gets initial_price
     *
     * @return double|null
     */
    public function getInitialPrice()
    {
        return $this->container['initial_price'];
    }

    /**
     * Sets initial_price
     *
     * @param double|null $initial_price initial_price
     *
     * @return self
     */
    public function setInitialPrice($initial_price)
    {
        $this->container['initial_price'] = $initial_price;

        return $this;
    }

    /**
     * Gets stop_loss_price
     *
     * @return double|null
     */
    public function getStopLossPrice()
    {
        return $this->container['stop_loss_price'];
    }

    /**
     * Sets stop_loss_price
     *
     * @param double|null $stop_loss_price stop_loss_price
     *
     * @return self
     */
    public function setStopLossPrice($stop_loss_price)
    {
        $this->container['stop_loss_price'] = $stop_loss_price;

        return $this;
    }

    /**
     * Gets take_profit_price
     *
     * @return double|null
     */
    public function getTakeProfitPrice()
    {
        return $this->container['take_profit_price'];
    }

    /**
     * Sets take_profit_price
     *
     * @param double|null $take_profit_price take_profit_price
     *
     * @return self
     */
    public function setTakeProfitPrice($take_profit_price)
    {
        $this->container['take_profit_price'] = $take_profit_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


